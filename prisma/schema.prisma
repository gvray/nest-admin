// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  userId       String      @unique @default(uuid())
  email        String?     @unique
  username     String      @unique
  nickname     String // 昵称，必须
  phone        String?     @unique
  password     String
  avatar       String?
  remark       String? // 备注信息
  status       Int         @default(1) // 0: 禁用, 1: 启用, 2: 审核中, 3: 封禁
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  positionId   Int?
  position     Position?   @relation(fields: [positionId], references: [id])
  roles        Role[]
  
  // 审计字段
  createdById  String?     // 创建者ID
  createdBy    User?       @relation("UserCreatedBy", fields: [createdById], references: [userId])
  updatedById  String?     // 更新者ID  
  updatedBy    User?       @relation("UserUpdatedBy", fields: [updatedById], references: [userId])
  
  // 反向关联 - 作为创建者/更新者的记录
  createdUsers     User[]            @relation("UserCreatedBy")
  updatedUsers     User[]            @relation("UserUpdatedBy")
  createdRoles     Role[]            @relation("RoleCreatedBy")
  updatedRoles     Role[]            @relation("RoleUpdatedBy")
  createdRolePerms RolePermission[]  @relation("RolePermissionCreatedBy")
  createdResources Resource[]        @relation("ResourceCreatedBy")
  updatedResources Resource[]        @relation("ResourceUpdatedBy")
  createdPerms     Permission[]      @relation("PermissionCreatedBy")
  updatedPerms     Permission[]      @relation("PermissionUpdatedBy")
  createdDepts     Department[]      @relation("DepartmentCreatedBy")
  updatedDepts     Department[]      @relation("DepartmentUpdatedBy")
  createdPositions Position[]        @relation("PositionCreatedBy")
  updatedPositions Position[]        @relation("PositionUpdatedBy")
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("users")
}

model Role {
  id              Int              @id @default(autoincrement())
  roleId          String           @unique @default(uuid())
  name            String           @unique
  description     String?
  remark          String?          // 备注信息
  sort            Int              @default(0) // 排序权重
  users           User[]
  rolePermissions RolePermission[]
  
  // 审计字段
  createdById     String?          // 创建者ID
  createdBy       User?            @relation("RoleCreatedBy", fields: [createdById], references: [userId])
  updatedById     String?          // 更新者ID
  updatedBy       User?            @relation("RoleUpdatedBy", fields: [updatedById], references: [userId])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("roles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade)
  
  // 审计字段
  createdById  String?    // 创建者ID
  createdBy    User?      @relation("RolePermissionCreatedBy", fields: [createdById], references: [userId])
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Resource {
  id          Int          @id @default(autoincrement())
  resourceId  String       @unique @default(uuid())
  name        String       @unique // 资源名称，如：用户管理、角色管理
  code        String       @unique // 资源代码，如：user, role, department
  type        ResourceType @default(MENU) // 资源类型：directory(目录)用于分组, menu(菜单)挂载权限点
  path        String?      // 资源路径，如：/users, /api/users
  method      String?      // HTTP方法，如：GET, POST, PUT, DELETE
  icon        String?      // 图标
  parentResourceId    String?
  parentResource      Resource?    @relation("ResourceHierarchy", fields: [parentResourceId], references: [resourceId])
  children    Resource[]   @relation("ResourceHierarchy")
  permissions Permission[]
  status      Int          @default(1) // 0: 禁用, 1: 启用
  sort        Int          @default(0)
  description String?
  
  // 审计字段
  createdById String?      // 创建者ID
  createdBy   User?        @relation("ResourceCreatedBy", fields: [createdById], references: [userId])
  updatedById String?      // 更新者ID
  updatedBy   User?        @relation("ResourceUpdatedBy", fields: [updatedById], references: [userId])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("resources")
}

enum ResourceType {
  DIRECTORY // 目录（仅作结构分组，不跳页面）
  MENU      // 菜单项（跳转页面）
}

model Permission {
  id              Int              @id @default(autoincrement())
  permissionId    String           @unique @default(uuid())
  name            String           @unique // 权限名称，如：查看用户、创建用户
  code            String           @unique // 权限代码，如：user:view, user:create
  action          String           // 操作类型：view(查看), create(创建), update(更新), delete(删除), export(导出), import(导入)
  resourceId      String           // 关联的菜单资源UUID（只能挂在MENU类型的资源上）
  resource        Resource         @relation(fields: [resourceId], references: [resourceId], onDelete: Cascade)
  rolePermissions RolePermission[]
  description     String?
  
  // 审计字段
  createdById     String?          // 创建者ID
  createdBy       User?            @relation("PermissionCreatedBy", fields: [createdById], references: [userId])
  updatedById     String?          // 更新者ID
  updatedBy       User?            @relation("PermissionUpdatedBy", fields: [updatedById], references: [userId])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("permissions")
}

model Department {
  id           Int          @id @default(autoincrement())
  departmentId String       @unique @default(uuid())
  name         String       @unique
  code         String       @unique
  description  String?
  remark       String?      // 备注信息
  parentDepartmentId String?
  parentDepartment      Department?  @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [departmentId])
  children     Department[] @relation("DepartmentHierarchy")
  users        User[]
  status       Int          @default(1) // 0: 禁用, 1: 启用
  sort         Int          @default(0)
  
  // 审计字段
  createdById  String?      // 创建者ID
  createdBy    User?        @relation("DepartmentCreatedBy", fields: [createdById], references: [userId])
  updatedById  String?      // 更新者ID
  updatedBy    User?        @relation("DepartmentUpdatedBy", fields: [updatedById], references: [userId])
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("departments")
}

model Position {
  id           Int        @id @default(autoincrement())
  positionId   String     @unique @default(uuid())
  name         String     @unique
  code         String     @unique
  description  String?
  remark       String?    // 备注信息
  users        User[]
  status       Int        @default(1) // 0: 禁用, 1: 启用
  sort         Int        @default(0)
  
  // 审计字段
  createdById  String?    // 创建者ID
  createdBy    User?      @relation("PositionCreatedBy", fields: [createdById], references: [userId])
  updatedById  String?    // 更新者ID
  updatedBy    User?      @relation("PositionUpdatedBy", fields: [updatedById], references: [userId])
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("positions")
}
