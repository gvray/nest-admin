// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  userId       String     @unique @default(uuid())
  email        String?    @unique
  username     String     @unique
  nickname     String     // 昵称，必须
  phone        String?    @unique
  password     String
  avatar       String?
  status       Int        @default(1) // 0: 禁用, 1: 启用, 2: 审核中, 3: 封禁
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  positionId   Int?
  position     Position?  @relation(fields: [positionId], references: [id])
  roles        Role[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permissions")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  description String?
  parentId    Int?
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  positions   Position[]
  users       User[]
  isActive    Boolean  @default(true)
  sort        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("departments")
}

model Position {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  code         String     @unique
  description  String?
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  users        User[]
  isActive     Boolean    @default(true)
  sort         Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("positions")
}
